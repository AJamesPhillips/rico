import { ShopBuilding, CROP_TYPES } from '../../decls/flowTypes'
import { Action, ACTION_TYPES } from '../actions/constants'

type State = ShopBuilding[];

function getBuildingsInitialState (): ShopBuilding[] {
  const numberOfPlayers = 1

  const initialCounts = {
    smallProductionBuilding: Math.min(4, numberOfPlayers),
    productionBuilding: Math.min(3, numberOfPlayers),
    smallVioletBuilding: Math.min(2, numberOfPlayers),
    largeVioletBuilding: 1,
  }

  return [
    {
      name: "Small Indigo Plant",
      description: "",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: CROP_TYPES.INDIGO,
      points: 1,
      cost: 1,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallProductionBuilding,
    },
    {
      name: "Small Sugar Mill",
      description: "",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: CROP_TYPES.SUGAR,
      points: 1,
      cost: 2,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallProductionBuilding,
    },
    {
      name: "Small Market",
      description: "+1 doubloon with sale",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 1,
      cost: 1,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Hacienda",
      description: "+1 plantation from supply",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 1,
      cost: 2,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Construction Hut",
      description: "quarry instead of plantation",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 1,
      cost: 2,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Small Warehouse",
      description: "store 1 kind of good",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 1,
      cost: 3,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Indigo Plant",
      description: "",
      size: 1,
      maxColonists: 3,
      colonists: 0,
      produces: CROP_TYPES.INDIGO,
      points: 2,
      cost: 3,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.productionBuilding,
    },
    {
      name: "Sugar Mill",
      description: "",
      size: 1,
      maxColonists: 3,
      colonists: 0,
      produces: CROP_TYPES.SUGAR,
      points: 2,
      cost: 4,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.productionBuilding,
    },
    {
      name: "Hospice",
      description: "+1 colonist for settling",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 2,
      cost: 4,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Office",
      description: "sell same kind of goods",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 2,
      cost: 5,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Large Market",
      description: "+2 doubloons with sale",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 2,
      cost: 5,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Large Warehouse",
      description: "store 2 kinds of goods",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 2,
      cost: 6,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Tobacco Storage",
      description: "",
      size: 1,
      maxColonists: 3,
      colonists: 0,
      produces: CROP_TYPES.TOBACCO,
      points: 3,
      cost: 5,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.productionBuilding,
    },
    {
      name: "Coffee Roaster",
      description: "",
      size: 1,
      maxColonists: 2,
      colonists: 0,
      produces: CROP_TYPES.COFFEE,
      points: 3,
      cost: 6,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.productionBuilding,
    },
    {
      name: "University",
      description: "+1 colonist for building",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 3,
      cost: 7,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Factory",
      description: "+0/1/2/3/5 doubloons with production",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 3,
      cost: 8,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Harbor",
      description: "+1 victory point per delivery",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 3,
      cost: 8,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Wharf",
      description: "your own ship",
      size: 1,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 3,
      cost: 9,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.smallVioletBuilding,
    },
    {
      name: "Guild Hall",
      description: "2 victory points for each large building\n\n1 victory points for each small building",
      size: 2,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 4,
      cost: 10,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.largeVioletBuilding,
    },
    {
      name: "Residence",
      description: "4 VP for <10\n5 VP for 10\n6 VP for 11\n7 VP for 12\n occupied island spaces",
      size: 2,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 4,
      cost: 10,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.largeVioletBuilding,
    },
    {
      name: "Fortress",
      description: "1 victory point for every 3 colonists",
      size: 2,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 4,
      cost: 10,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.largeVioletBuilding,
    },
    {
      name: "Customs House",
      description: "1 victory point for every 4 victory point chip",
      size: 2,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 4,
      cost: 10,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.largeVioletBuilding,
    },
    {
      name: "City Hall",
      description: "1 victory point for each violet building",
      size: 2,
      maxColonists: 1,
      colonists: 0,
      produces: undefined,
      points: 4,
      cost: 10,
      maxQuaries: 1,
      remainingCount: undefined,
      initialCount: initialCounts.largeVioletBuilding,
    }
  ]
}

export const buildings = (state: State = getBuildingsInitialState(), action: Action): State => {
  if (action.type === ACTION_TYPES.REDUCE_BUILDING_SUPPLY) {
    return state.map(building => {
      if (building.name !== action.building.name) {
        return building
      }

      let remainingCount = building.remainingCount === undefined ? building.initialCount : building.remainingCount
      remainingCount += -1

      return {
        ...building,
        remainingCount,
      }
    })
  }

  return state
}
